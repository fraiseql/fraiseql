# FraiseQL Test Suite Makefile
# Specialized commands for running tests with Podman/PostgreSQL

# Test environment setup
export TESTCONTAINERS_PODMAN := true
export TESTCONTAINERS_RYUK_DISABLED := true

# Pytest options
PYTEST_OPTS := -xvs
PYTEST_PARALLEL := -n auto
PYTEST_COVERAGE := --cov=src/fraiseql --cov-report=html --cov-report=term

# Test markers
MARKERS_UNIT := -m "not database"
MARKERS_DB := -m "database"

.PHONY: test-all
test-all: ## Run complete test suite with Podman
	@echo "🧪 Running complete test suite with Podman..."
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	pytest $(PYTEST_OPTS)

.PHONY: test-quick
test-quick: ## Run tests in parallel (faster but less verbose)
	@echo "⚡ Running tests in parallel..."
	pytest $(PYTEST_PARALLEL)

.PHONY: test-unit
test-unit: ## Run unit tests only (no database required)
	@echo "📝 Running unit tests..."
	pytest $(PYTEST_OPTS) $(MARKERS_UNIT)

.PHONY: test-integration
test-integration: ## Run integration tests with database
	@echo "🗄️  Running database integration tests..."
	pytest $(PYTEST_OPTS) $(MARKERS_DB)

.PHONY: test-fraiseql-core
test-fraiseql-core: ## Test core FraiseQL functionality
	@echo "🌸 Testing FraiseQL core..."
	pytest $(PYTEST_OPTS) tests/core/ tests/types/ tests/sql/

.PHONY: test-graphql
test-graphql: ## Test GraphQL functionality
	@echo "📊 Testing GraphQL layer..."
	pytest $(PYTEST_OPTS) tests/gql/

.PHONY: test-mutations
test-mutations: ## Test mutation functionality
	@echo "🔄 Testing mutations..."
	pytest $(PYTEST_OPTS) tests/mutations/

.PHONY: test-cqrs
test-cqrs: ## Test CQRS functionality
	@echo "📨 Testing CQRS..."
	pytest $(PYTEST_OPTS) tests/cqrs/

.PHONY: test-testfoundry
test-testfoundry: ## Test TestFoundry extension
	@echo "🏭 Testing TestFoundry extension..."
	pytest $(PYTEST_OPTS) tests/extensions/testfoundry/

.PHONY: test-testfoundry-structure
test-testfoundry-structure: ## Test pgTAP structure generation
	@echo "🏗️  Testing pgTAP structure generation..."
	pytest $(PYTEST_OPTS) tests/extensions/testfoundry/test_pgtap_structure.py

.PHONY: test-testfoundry-execution
test-testfoundry-execution: ## Test pgTAP execution
	@echo "▶️  Testing pgTAP execution..."
	pytest $(PYTEST_OPTS) tests/extensions/testfoundry/test_pgtap_execution.py

.PHONY: test-coverage
test-coverage: ## Run tests with coverage report
	@echo "📊 Running tests with coverage analysis..."
	pytest $(PYTEST_COVERAGE)
	@echo "📂 Coverage report generated in htmlcov/"

.PHONY: test-coverage-open
test-coverage-open: test-coverage ## Run coverage and open HTML report
	@echo "🌐 Opening coverage report..."
	@command -v xdg-open >/dev/null 2>&1 && xdg-open htmlcov/index.html || open htmlcov/index.html

.PHONY: test-failed
test-failed: ## Re-run only failed tests
	@echo "🔁 Re-running failed tests..."
	pytest $(PYTEST_OPTS) --lf

.PHONY: test-file
test-file: ## Run specific test file (use FILE=path/to/test.py)
	@if [ -z "$(FILE)" ]; then \
		echo "❌ Please specify FILE=path/to/test.py"; \
		exit 1; \
	fi
	@echo "📄 Running tests in $(FILE)..."
	pytest $(PYTEST_OPTS) $(FILE)

.PHONY: test-function
test-function: ## Run specific test function (use FUNC=test_name)
	@if [ -z "$(FUNC)" ]; then \
		echo "❌ Please specify FUNC=test_name"; \
		exit 1; \
	fi
	@echo "🔍 Running test function: $(FUNC)..."
	pytest $(PYTEST_OPTS) -k $(FUNC)

.PHONY: test-debug
test-debug: ## Run tests with debugging enabled
	@echo "🐛 Running tests with debugging..."
	pytest $(PYTEST_OPTS) --pdb

.PHONY: test-verbose
test-verbose: ## Run tests with extra verbosity
	@echo "📢 Running tests with extra verbosity..."
	pytest -xvvs

.PHONY: test-benchmark
test-benchmark: ## Run performance benchmarks
	@echo "⏱️  Running performance benchmarks..."
	pytest $(PYTEST_OPTS) --benchmark-only

.PHONY: test-clean
test-clean: ## Clean test artifacts
	@echo "🧹 Cleaning test artifacts..."
	rm -rf .pytest_cache/
	rm -rf htmlcov/
	rm -f .coverage
	find . -type d -name "__pycache__" -exec rm -rf {} +
	find . -type f -name "*.pyc" -delete

.PHONY: test-containers-clean
test-containers-clean: ## Clean up test containers
	@echo "🐳 Cleaning up test containers..."
	podman ps -a --filter "ancestor=postgres:16-alpine" -q | xargs -r podman rm -f
	podman ps -a --filter "label=org.testcontainers=true" -q | xargs -r podman rm -f
	@echo "✅ Test containers cleaned"

.PHONY: test-watch
test-watch: ## Run tests in watch mode (requires pytest-watch)
	@command -v ptw >/dev/null 2>&1 || { echo "❌ pytest-watch not installed. Run: pip install pytest-watch"; exit 1; }
	@echo "👁️  Running tests in watch mode..."
	ptw -- $(PYTEST_OPTS)

.PHONY: test-report
test-report: ## Generate test report
	@echo "📋 Generating test report..."
	pytest $(PYTEST_OPTS) --html=test-report.html --self-contained-html
	@echo "✅ Report generated: test-report.html"

.PHONY: help
help: ## Show this help message
	@echo "FraiseQL Test Suite Commands"
	@echo "============================"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "%-25s %s\n", $$1, $$2}'

# Default target
.DEFAULT_GOAL := help
