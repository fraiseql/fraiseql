name: Python Version Matrix Tests

# Test Python 3.13+ compatibility
# This complements the quality-gate workflow
on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  # Allow manual trigger
  workflow_dispatch:

concurrency:
  group: python-matrix-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-matrix:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false  # Continue testing other versions even if one fails
      matrix:
        python-version: ['3.13']

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: fraiseql
          POSTGRES_PASSWORD: fraiseql
          POSTGRES_DB: fraiseql_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v7

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Install maturin
      run: uv tool install maturin

    - name: Setup environment and install dependencies
      run: |
        echo "=== Python Version Info ==="
        python --version

        # Create virtual environment with uv
        uv venv

        echo "=== Installing build dependencies ==="
        uv pip install setuptools wheel

        echo "=== Installing FraiseQL dependencies ==="
        uv pip install ".[dev,all]"

        echo "=== Building Rust extension with maturin ==="
        uv run maturin develop --uv

        echo "=== Verifying Installation ==="
        uv run python -c "import fraiseql; print(f'FraiseQL version: {fraiseql.__version__}')"
        uv run python -c "from fraiseql import fraiseql_rs; print(f'fraiseql_rs loaded successfully')"

    - name: Verify Environment
      run: |
        echo "=== Environment Verification ==="
        uv run python --version
        uv --version
        uv run pytest --version
        rustc --version

        echo "=== PostgreSQL Health Check ==="
        pg_isready -h localhost -p 5432 -U fraiseql && echo '‚úÖ PostgreSQL Ready' || echo '‚ùå PostgreSQL Not Ready'

        echo "=== Database Connection Test ==="
        uv run python -c "import psycopg; conn = psycopg.connect('postgresql://fraiseql:fraiseql@localhost:5432/fraiseql_test'); print('‚úÖ DB connection successful'); conn.close()"

        echo "=== Rust Extension Verification ==="
        uv run python -c "from fraiseql import fraiseql_rs; print(f'‚úÖ fraiseql_rs imported'); print(f'Available functions: {[f for f in dir(fraiseql_rs) if not f.startswith(\"_\")]}')"

    - name: Run tests with pytest
      env:
        DATABASE_URL: postgresql://fraiseql:fraiseql@localhost:5432/fraiseql_test
        TEST_DATABASE_URL: postgresql://fraiseql:fraiseql@localhost:5432/fraiseql_test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: fraiseql
        DB_PASSWORD: fraiseql
        PYTEST_CURRENT_TEST: ""
      run: |
        echo "=== Running Tests on Python ${{ matrix.python-version }} ==="

        uv run pytest tests/ \
          --cov=src/fraiseql \
          --cov-report=xml \
          --cov-report=term-missing \
          -v \
          -m "not blog_simple and not blog_enterprise" \
          --tb=short \
          --disable-warnings \
          || {
            echo "‚ùå Tests failed on Python ${{ matrix.python-version }}"
            exit 1
          }

        echo "‚úÖ All tests passed on Python ${{ matrix.python-version }}"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        flags: python-${{ matrix.python-version }}
        name: Python-${{ matrix.python-version }}
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  # Summary job to check if all Python versions passed
  matrix-summary:
    name: Python Version Matrix Summary
    runs-on: ubuntu-latest
    needs: [test-matrix]
    if: always()

    steps:
      - name: Check matrix results
        run: |
          echo "=== Python Version Matrix Test Results ==="

          if [[ "${{ needs.test-matrix.result }}" == "success" ]]; then
            echo "‚úÖ Python 3.13+ tests passed!"
            echo "üéâ Code is compatible with Python 3.13+"
            exit 0
          else
            echo "‚ùå Python 3.13 testing failed"
            echo "‚ö†Ô∏è  Check the individual job results above for details"
            exit 1
          fi

  # Optional: Run with tox for additional validation
  tox-test:
    name: Tox Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: fraiseql
          POSTGRES_PASSWORD: fraiseql
          POSTGRES_DB: fraiseql_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install tox
      run: pip install tox

    - name: Install uv
      uses: astral-sh/setup-uv@v7

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Install maturin
      run: pip install maturin

    - name: Run tox for Python 3.13
      env:
        DATABASE_URL: postgresql://fraiseql:fraiseql@localhost:5432/fraiseql_test
        TEST_DATABASE_URL: postgresql://fraiseql:fraiseql@localhost:5432/fraiseql_test
      run: |
        echo "=== Running Tox Tests ==="
        # Run tox for Python 3.13
        # Tox will install dependencies and run maturin develop to build the Rust extension
        tox -e py313 || {
          echo "‚ùå Tox tests failed"
          exit 1
        }
        echo "‚úÖ Tox tests passed"
