name: Publish

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    name: Tests (Required for Release)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: fraiseql
          POSTGRES_PASSWORD: fraiseql
          POSTGRES_DB: fraiseql_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pip'
        cache-dependency-path: '**/pyproject.toml'

    - name: Install uv
      uses: astral-sh/setup-uv@v6

    - name: Set up Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable

    - name: Install maturin
      run: pip install maturin

    - name: Build fraiseql_rs extension
      run: |
        cd fraiseql_rs
        maturin develop
        cd ..

    - name: Install dependencies
      run: |
        # Use uv for faster and more reliable dependency resolution
        # Install all optional dependencies for comprehensive testing
        uv pip install --system -e ".[dev,all]"

    - name: Run core tests with coverage
      env:
        DATABASE_URL: postgresql://fraiseql:fraiseql@localhost:5432/fraiseql_test
        TEST_DATABASE_URL: postgresql://fraiseql:fraiseql@localhost:5432/fraiseql_test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: fraiseql
        DB_PASSWORD: fraiseql
      run: |
        # Run core tests first - MUST PASS for release
        pytest tests/ --cov=src/fraiseql --cov-report=xml --cov-report=term-missing -v -m "not blog_simple and not blog_enterprise"

    - name: Run example integration tests
      env:
        DATABASE_URL: postgresql://fraiseql:fraiseql@localhost:5432/fraiseql_test
        TEST_DATABASE_URL: postgresql://fraiseql:fraiseql@localhost:5432/fraiseql_test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: fraiseql
        DB_PASSWORD: fraiseql
        # Smart dependency management configuration for CI
        FRAISEQL_ENVIRONMENT: ci
        FRAISEQL_AUTO_INSTALL: false
        FRAISEQL_LOG_LEVEL: INFO
      run: |
        # Run example integration tests - MUST PASS for release
        pytest tests/integration/examples/ -v --tb=short

  lint:
    name: Lint (Required for Release)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Set up Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
    - name: Install maturin
      run: pip install maturin
    - name: Build fraiseql_rs extension
      run: |
        cd fraiseql_rs
        maturin develop
        cd ..
    - name: Install dependencies
      run: uv pip install --system -e ".[dev]"
    - name: Run ruff
      run: ruff check .
    - name: Run ruff format
      run: ruff format --check .

  security:
    name: Security (Required for Release)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Set up Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
    - name: Install maturin
      run: pip install maturin
    - name: Build fraiseql_rs extension
      run: |
        cd fraiseql_rs
        maturin develop
        cd ..
    - name: Install dependencies
      run: uv pip install --system -e ".[dev]"
    - name: Run bandit
      run: bandit -r src/ -f json || true

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
    # ðŸš¨ CRITICAL: Publish ONLY runs if ALL quality checks pass
    needs: [test, lint, security]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_TOKEN }}
