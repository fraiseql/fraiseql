name: Publish

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    name: Tests (Required for Release)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: fraiseql
          POSTGRES_PASSWORD: fraiseql
          POSTGRES_DB: fraiseql_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pip'
        cache-dependency-path: '**/pyproject.toml'

    - name: Install uv
      uses: astral-sh/setup-uv@v7

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Install maturin
      run: uv tool install maturin

    - name: Build and install with production optimization
      run: |
        # Create virtual environment with uv
        uv venv

        echo "=== Building production wheel with Rust extension ==="
        # Build optimized release wheel (production-ready)
        maturin build --release --out dist

        echo "=== Installing built wheel with dependencies ==="
        WHEEL=$(ls dist/fraiseql-*.whl)
        uv pip install "$WHEEL[dev,all]" --no-cache

        echo "=== Verifying bundled Rust extension ==="
        uv run python -c "from fraiseql import _fraiseql_rs; print(f'Bundled extension version: {_fraiseql_rs.__version__}')"
        uv run python -c "from fraiseql import _fraiseql_rs; print(f'Functions: {[f for f in dir(_fraiseql_rs) if not f.startswith(\"_\")]}')"

    - name: Run core tests with coverage
      run: |
        echo "=== Running Core Tests for Release ==="
        # Run core tests first - MUST PASS for release
        uv run pytest tests/ --cov=src/fraiseql --cov-report=xml --cov-report=term-missing -v -m "not blog_simple and not blog_enterprise"
      env:
        DATABASE_URL: postgresql://fraiseql:fraiseql@localhost:5432/fraiseql_test
        TEST_DATABASE_URL: postgresql://fraiseql:fraiseql@localhost:5432/fraiseql_test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: fraiseql
        DB_PASSWORD: fraiseql

    - name: Run example integration tests
      run: |
        echo "=== Running Example Integration Tests for Release ==="
        # Run example integration tests - MUST PASS for release
        uv run pytest tests/integration/examples/ -v --tb=short
      env:
        DATABASE_URL: postgresql://fraiseql:fraiseql@localhost:5432/fraiseql_test
        TEST_DATABASE_URL: postgresql://fraiseql:fraiseql@localhost:5432/fraiseql_test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: fraiseql
        DB_PASSWORD: fraiseql
        # Smart dependency management configuration for CI
        FRAISEQL_ENVIRONMENT: ci
        FRAISEQL_AUTO_INSTALL: false
        FRAISEQL_LOG_LEVEL: INFO

  lint:
    name: Lint (Required for Release)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    - name: Install uv
      uses: astral-sh/setup-uv@v7
    - name: Install dependencies
      run: |
        uv venv
        uv pip install ruff
    - name: Run ruff check
      run: uv run ruff check .
    - name: Run ruff format
      run: uv run ruff format --check .

  security:
    name: Security (Required for Release)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    - name: Install uv
      uses: astral-sh/setup-uv@v7
    - name: Install dependencies
      run: |
        uv venv
        uv pip install bandit
    - name: Run bandit
      run: uv run bandit -r src/ -f json || true

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    # ðŸš¨ CRITICAL: Build ONLY runs if ALL quality checks pass
    needs: [test, lint, security]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        maturin-version: latest
        command: build
        args: --release --out dist --find-interpreter

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: dist

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
    needs: [build-wheels]

    steps:
    - uses: actions/checkout@v4

    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        merge-multiple: true
        path: dist

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_TOKEN }}
