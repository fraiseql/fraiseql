"""Comprehensive tests for graphql_type module to improve coverage."""

from dataclasses import dataclass
from enum import Enum
from typing import Annotated, Any, Optional, Union
from uuid import UUID

import pytest
from graphql import (
    GraphQLBoolean,
    GraphQLEnumType,
    GraphQLFloat,
    GraphQLID,
    GraphQLInputObjectType,
    GraphQLInt,
    GraphQLList,
    GraphQLNonNull,
    GraphQLObjectType,
    GraphQLString,
    GraphQLUnionType,
)

from fraiseql.core.graphql_type import (
    convert_type_to_graphql_input,
    convert_type_to_graphql_output,
)
from fraiseql.mutations.decorators import FraiseUnion
from fraiseql.types import fraise_enum, fraise_input, fraise_type
from fraiseql.types.scalars.date import DateField
from fraiseql.types.scalars.datetime import DateTimeField
from fraiseql.types.scalars.json import JSONScalar


@fraise_type
@dataclass
class SimpleType:
    """Simple type for testing."""
    id: int
    name: str
    is_active: bool
    score: float


@fraise_type
@dataclass
class TypeWithOptionals:
    """Type with optional fields."""
    id: int
    name: Optional[str] = None
    age: Optional[int] = None


@fraise_type
@dataclass
class TypeWithLists:
    """Type with list fields."""
    id: int
    tags: list[str]
    numbers: list[int]
    optional_list: Optional[list[str]] = None


@fraise_type
@dataclass
class NestedType:
    """Type with nested objects."""
    id: int
    simple: SimpleType
    optional_nested: Optional[SimpleType] = None
    nested_list: list[SimpleType]


@fraise_input
@dataclass
class SimpleInput:
    """Simple input type."""
    name: str
    value: int


@fraise_input
@dataclass
class InputWithOptionals:
    """Input with optional fields."""
    required: str
    optional: Optional[str] = None


@fraise_enum
class Status(Enum):
    """Test enum."""
    ACTIVE = "active"
    INACTIVE = "inactive"
    PENDING = "pending"


@fraise_type
@dataclass
class TypeWithEnum:
    """Type with enum field."""
    id: int
    status: Status


@fraise_type
@dataclass
class TypeWithScalars:
    """Type with custom scalar fields."""
    id: UUID
    name: str
    created_at: DateTimeField
    birth_date: DateField
    metadata: JSONScalar


class TestPythonTypeToGraphQL:
    """Test the pythontype_to_graphql function."""

    def test_basic_scalars(self):
        """Test conversion of basic Python types to GraphQL scalars."""
        assert pythontype_to_graphql(int) == GraphQLInt
        assert pythontype_to_graphql(str) == GraphQLString
        assert pythontype_to_graphql(bool) == GraphQLBoolean
        assert pythontype_to_graphql(float) == GraphQLFloat

    def test_special_types(self):
        """Test conversion of special types."""
        # UUID -> GraphQL ID
        assert pythontype_to_graphql(UUID) == GraphQLID

        # Any -> GraphQL String (fallback)
        assert pythontype_to_graphql(Any) == GraphQLString

    def test_dict_types(self):
        """Test conversion of dict types."""
        # dict -> JSONScalar
        gql_type = pythontype_to_graphql(dict)
        assert gql_type.name == "JSON"

        # dict[str, Any] -> JSONScalar
        gql_type = pythontype_to_graphql(dict[str, Any])
        assert gql_type.name == "JSON"

    def test_unsupported_type(self):
        """Test that unsupported types raise error."""
        class CustomClass:
            pass

        with pytest.raises(TypeError, match="Cannot convert"):
            pythontype_to_graphql(CustomClass)

    def test_none_type(self):
        """Test that None type raises error."""
        with pytest.raises(TypeError, match="Cannot convert"):
            pythontype_to_graphql(type(None))


class TestConvertTypeToGraphQLOutput:
    """Test the convert_type_to_graphql_output function."""

    def test_simple_type_conversion(self):
        """Test conversion of simple fraise_type."""
        gql_type = convert_type_to_graphql_output(SimpleType)

        assert isinstance(gql_type, GraphQLObjectType)
        assert gql_type.name == "SimpleType"

        # Check fields
        fields = gql_type.fields
        assert "id" in fields
        assert "name" in fields
        assert "is_active" in fields
        assert "score" in fields

        # Check field types
        assert fields["id"].type == GraphQLInt
        assert fields["name"].type == GraphQLString
        assert fields["is_active"].type == GraphQLBoolean
        assert fields["score"].type == GraphQLFloat

    def test_type_with_optionals(self):
        """Test conversion of type with optional fields."""
        gql_type = convert_type_to_graphql_output(TypeWithOptionals)

        assert isinstance(gql_type, GraphQLObjectType)
        fields = gql_type.fields

        # Required field should be non-null
        assert isinstance(fields["id"].type, GraphQLNonNull)
        assert fields["id"].type.of_type == GraphQLInt

        # Optional fields should not be non-null
        assert fields["name"].type == GraphQLString
        assert fields["age"].type == GraphQLInt

    def test_type_with_lists(self):
        """Test conversion of type with list fields."""
        gql_type = convert_type_to_graphql_output(TypeWithLists)

        fields = gql_type.fields

        # Check list types
        assert isinstance(fields["tags"].type, GraphQLList)
        assert fields["tags"].type.of_type == GraphQLString

        assert isinstance(fields["numbers"].type, GraphQLList)
        assert fields["numbers"].type.of_type == GraphQLInt

        # Optional list
        assert isinstance(fields["optional_list"].type, GraphQLList)

    def test_nested_type_conversion(self):
        """Test conversion of nested types."""
        gql_type = convert_type_to_graphql_output(NestedType)

        fields = gql_type.fields

        # Check nested object type
        assert isinstance(fields["simple"].type, GraphQLObjectType)
        assert fields["simple"].type.name == "SimpleType"

        # Check optional nested
        assert isinstance(fields["optional_nested"].type, GraphQLObjectType)

        # Check nested list
        assert isinstance(fields["nested_list"].type, GraphQLList)
        assert isinstance(fields["nested_list"].type.of_type, GraphQLObjectType)

    def test_enum_type_conversion(self):
        """Test conversion of enum types."""
        gql_type = convert_type_to_graphql_output(TypeWithEnum)

        fields = gql_type.fields
        assert isinstance(fields["status"].type, GraphQLEnumType)
        assert fields["status"].type.name == "Status"

        # Check enum values
        enum_values = fields["status"].type.values
        assert "ACTIVE" in enum_values
        assert "INACTIVE" in enum_values
        assert "PENDING" in enum_values

    def test_custom_scalar_types(self):
        """Test conversion of custom scalar types."""
        gql_type = convert_type_to_graphql_output(TypeWithScalars)

        fields = gql_type.fields

        # UUID -> ID
        assert fields["id"].type == GraphQLID

        # Custom scalars
        assert fields["created_at"].type.name == "DateTime"
        assert fields["birth_date"].type.name == "Date"
        assert fields["metadata"].type.name == "JSON"

    def test_optional_type_conversion(self):
        """Test conversion of Optional[Type]."""
        # Optional output type
        gql_type = convert_type_to_graphql_output(Optional[SimpleType])
        assert isinstance(gql_type, GraphQLObjectType)
        assert gql_type.name == "SimpleType"

    def test_list_type_conversion(self):
        """Test conversion of list[Type]."""
        gql_type = convert_type_to_graphql_output(list[SimpleType])
        assert isinstance(gql_type, GraphQLList)
        assert isinstance(gql_type.of_type, GraphQLObjectType)
        assert gql_type.of_type.name == "SimpleType"

    def test_union_type_conversion(self):
        """Test conversion of union types."""
        @fraise_type
        @dataclass
        class TypeA:
            a: str

        @fraise_type
        @dataclass
        class TypeB:
            b: int

        # Annotated union
        TestUnion = Annotated[Union[TypeA, TypeB], FraiseUnion(name="TestUnion")]

        gql_type = convert_type_to_graphql_output(TestUnion)
        assert isinstance(gql_type, GraphQLUnionType)
        assert gql_type.name == "TestUnion"
        assert len(gql_type.types) == 2

    def test_type_caching(self):
        """Test that types are cached."""
        # First conversion
        gql_type1 = convert_type_to_graphql_output(SimpleType)

        # Second conversion should return cached type
        gql_type2 = convert_type_to_graphql_output(SimpleType)

        assert gql_type1 is gql_type2

    def test_non_fraise_type(self):
        """Test conversion of non-fraise types."""
        # Should convert basic Python types
        assert convert_type_to_graphql_output(str) == GraphQLString
        assert convert_type_to_graphql_output(int) == GraphQLInt

    def test_invalid_union_member(self):
        """Test that invalid union members raise error."""
        with pytest.raises(TypeError, match="can only include GraphQLObjectType"):
            TestUnion = Annotated[Union[str, int], FraiseUnion(name="BadUnion")]
            convert_type_to_graphql_output(TestUnion)


class TestConvertTypeToGraphQLInput:
    """Test the convert_type_to_graphql_input function."""

    def test_simple_input_conversion(self):
        """Test conversion of simple input type."""
        gql_type = convert_type_to_graphql_input(SimpleInput)

        assert isinstance(gql_type, GraphQLInputObjectType)
        assert gql_type.name == "SimpleInput"

        # Check fields
        fields = gql_type.fields
        assert "name" in fields
        assert "value" in fields

    def test_input_with_optionals(self):
        """Test conversion of input with optional fields."""
        gql_type = convert_type_to_graphql_input(InputWithOptionals)

        fields = gql_type.fields

        # Required field
        assert isinstance(fields["required"].type, GraphQLNonNull)

        # Optional field
        assert fields["optional"].type == GraphQLString

    def test_scalar_input_types(self):
        """Test conversion of scalar input types."""
        # String input
        assert convert_type_to_graphql_input(str) == GraphQLString

        # Int input
        assert convert_type_to_graphql_input(int) == GraphQLInt

        # List input
        gql_type = convert_type_to_graphql_input(list[str])
        assert isinstance(gql_type, GraphQLList)
        assert gql_type.of_type == GraphQLString

    def test_nested_input_conversion(self):
        """Test conversion of nested input types."""
        @fraise_input
        @dataclass
        class NestedInput:
            simple: SimpleInput
            optional: Optional[SimpleInput] = None

        gql_type = convert_type_to_graphql_input(NestedInput)

        fields = gql_type.fields
        assert isinstance(fields["simple"].type, GraphQLInputObjectType)
        assert fields["optional"].type.name == "SimpleInput"

    def test_enum_input_type(self):
        """Test conversion of enum input types."""
        gql_type = convert_type_to_graphql_input(Status)

        assert isinstance(gql_type, GraphQLEnumType)
        assert gql_type.name == "Status"

    def test_input_type_caching(self):
        """Test that input types are cached."""
        gql_type1 = convert_type_to_graphql_input(SimpleInput)
        gql_type2 = convert_type_to_graphql_input(SimpleInput)

        assert gql_type1 is gql_type2


class TestBuildResolverFunction:
    """Test the build_resolver_function."""

    def test_simple_resolver(self):
        """Test building a simple resolver function."""
        # Mock table and field paths
        table = "users"

        resolver = build_resolver_function(
            table=table,
            sql_source="user_view",
            typename="User",
            query_name="getUser",
        )

        assert callable(resolver)
        # Would need mock GraphQL info to test execution

    def test_resolver_with_where_function(self):
        """Test resolver with where function."""
        def where_func(args):
            return {"id": args.get("id")}

        resolver = build_resolver_function(
            table="users",
            sql_source="user_view",
            typename="User",
            query_name="getUser",
            where_function=where_func,
        )

        assert callable(resolver)

    def test_resolver_with_single_result(self):
        """Test resolver for single result queries."""
        resolver = build_resolver_function(
            table="users",
            sql_source="user_view",
            typename="User",
            query_name="getUserById",
            single_result=True,
        )

        assert callable(resolver)


class TestGetGraphQLType:
    """Test the get_graphql_type function."""

    def test_get_output_type(self):
        """Test getting output GraphQL type."""
        gql_type = get_graphql_type(SimpleType, is_input=False)
        assert isinstance(gql_type, GraphQLObjectType)

    def test_get_input_type(self):
        """Test getting input GraphQL type."""
        gql_type = get_graphql_type(SimpleInput, is_input=True)
        assert isinstance(gql_type, GraphQLInputObjectType)

    def test_get_scalar_type(self):
        """Test getting scalar GraphQL type."""
        # Scalars work for both input and output
        assert get_graphql_type(str, is_input=False) == GraphQLString
        assert get_graphql_type(str, is_input=True) == GraphQLString

    def test_get_list_type(self):
        """Test getting list GraphQL type."""
        gql_type = get_graphql_type(list[str], is_input=False)
        assert isinstance(gql_type, GraphQLList)

    def test_schema_config_usage(self):
        """Test that schema config is used when available."""
        # Would need to test with actual schema config


class TestEdgeCases:
    """Test edge cases and error conditions."""

    def test_circular_type_reference(self):
        """Test handling of circular type references."""
        @fraise_type
        @dataclass
        class Node:
            id: int
            children: Optional[list["Node"]] = None

        # Should handle forward references
        gql_type = convert_type_to_graphql_output(Node)
        assert isinstance(gql_type, GraphQLObjectType)

    def test_empty_union(self):
        """Test that empty union raises error."""
        with pytest.raises(TypeError, match="has no union members"):
            EmptyUnion = Annotated[Union[()], FraiseUnion(name="EmptyUnion")]
            convert_type_to_graphql_output(EmptyUnion)

    def test_non_union_with_fraise_union(self):
        """Test that non-union type with FraiseUnion raises error."""
        with pytest.raises(TypeError, match="must wrap a union type"):
            BadType = Annotated[str, FraiseUnion(name="BadType")]
            convert_type_to_graphql_output(BadType)

    def test_complex_nested_optional_list(self):
        """Test complex nested optional list types."""
        @fraise_type
        @dataclass
        class ComplexType:
            data: Optional[list[Optional[list[SimpleType]]]]

        gql_type = convert_type_to_graphql_output(ComplexType)
        fields = gql_type.fields

        # Should handle deep nesting
        assert isinstance(fields["data"].type, GraphQLList)

    def test_type_with_methods(self):
        """Test that types with methods are handled."""
        @fraise_type
        @dataclass
        class TypeWithMethod:
            id: int
            name: str

            def get_display_name(self) -> str:
                return f"#{self.id}: {self.name}"

        # Methods should be ignored
        gql_type = convert_type_to_graphql_output(TypeWithMethod)
        fields = gql_type.fields

        assert "id" in fields
        assert "name" in fields
        assert "get_display_name" not in fields
