version: '3.8'

services:
  # FraiseQL Application
  app:
    build:
      context: ..
      dockerfile: Dockerfile
    image: fraiseql-app:latest
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://fraiseql:${POSTGRES_PASSWORD}@pgbouncer:6432/fraiseql
      - ENVIRONMENT=production
      - DEBUG=false
      - RUST_PIPELINE_ENABLED=true
      - APQ_STORAGE_BACKEND=postgresql
      - APQ_STORAGE_SCHEMA=apq_cache
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - SECRET_KEY=${SECRET_KEY}
      - ENABLE_ERROR_TRACKING=true
      - ERROR_NOTIFICATION_EMAIL=${ERROR_EMAIL}
    depends_on:
      - pgbouncer
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    networks:
      - fraiseql-network

  # PostgreSQL Database
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      - POSTGRES_DB=fraiseql
      - POSTGRES_USER=fraiseql
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fraiseql"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fraiseql-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # PgBouncer Connection Pooler
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://fraiseql:${POSTGRES_PASSWORD}@db:5432/fraiseql
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=1000
      - DEFAULT_POOL_SIZE=20
      - MIN_POOL_SIZE=5
      - RESERVE_POOL_SIZE=5
      - RESERVE_POOL_TIMEOUT=5
    ports:
      - "6432:6432"
    depends_on:
      - db
    networks:
      - fraiseql-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Grafana for Monitoring
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=db:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=fraiseql
      - GF_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ../grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - db
    networks:
      - fraiseql-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - fraiseql-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

volumes:
  postgres_data:
  grafana_data:
  nginx_logs:

networks:
  fraiseql-network:
    driver: bridge
