[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "fraiseql"
version = "1.0.0-alpha"
description = "High-performance Python GraphQL framework with CQRS and Rust acceleration"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
    { name = "Lionel", email = "lionel@example.com" }
]
keywords = ["graphql", "cqrs", "rust", "performance", "postgresql", "async"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Rust",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database",
    "Framework :: FastAPI",
]

dependencies = [
    "graphql-core>=3.2.0",
    "asyncpg>=0.29.0",
    "pydantic>=2.0.0",
    "python-dateutil>=2.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "black>=24.0.0",
]
fastapi = [
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "strawberry-graphql>=0.219.0",
]
cli = [
    "typer>=0.9.0",
    "rich>=13.0.0",
]
all = [
    "fraiseql[dev,fastapi,cli]",
]

[project.urls]
Homepage = "https://github.com/yourusername/fraiseql"
Documentation = "https://fraiseql.readthedocs.io"
Repository = "https://github.com/yourusername/fraiseql"
Issues = "https://github.com/yourusername/fraiseql/issues"

[project.scripts]
fraiseql = "fraiseql.cli:app"

[tool.maturin]
python-source = "src"
module-name = "fraiseql._fraiseql_rs"
features = ["pyo3/extension-module"]

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--tb=short",
    "--cov=fraiseql",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true

[[tool.mypy.overrides]]
module = "graphql.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "asyncpg.*"
ignore_missing_imports = true

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.black]
line-length = 100
target-version = ["py311"]
