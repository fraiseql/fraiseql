# Kubernetes Secrets Template for FraiseQL
#
# IMPORTANT: This is a template file. DO NOT commit actual secrets to git.
#
# Usage:
#   1. Copy this file: cp secrets.yaml.example secrets.yaml
#   2. Replace placeholder values with actual base64-encoded secrets
#   3. Apply: kubectl apply -f secrets.yaml
#   4. Add secrets.yaml to .gitignore
#
# To base64 encode a value:
#   echo -n "your-secret-value" | base64
#
apiVersion: v1
kind: Secret
metadata:
  name: fraiseql-secrets
  labels:
    app: fraiseql
type: Opaque
data:
  # Database Credentials (base64 encoded)
  # Example: echo -n "myuser" | base64
  DB_USER: <BASE64_ENCODED_DB_USER>
  DB_PASSWORD: <BASE64_ENCODED_DB_PASSWORD>

  # JWT Secret for Authentication
  # Generate: openssl rand -base64 32 | base64
  JWT_SECRET: <BASE64_ENCODED_JWT_SECRET>

  # CSRF Token Secret
  # Generate: openssl rand -base64 32 | base64
  CSRF_SECRET: <BASE64_ENCODED_CSRF_SECRET>

  # API Keys (if using API key authentication)
  API_KEY: <BASE64_ENCODED_API_KEY>

  # Auth0 Configuration (if using Auth0)
  AUTH0_DOMAIN: <BASE64_ENCODED_AUTH0_DOMAIN>
  AUTH0_CLIENT_ID: <BASE64_ENCODED_AUTH0_CLIENT_ID>
  AUTH0_CLIENT_SECRET: <BASE64_ENCODED_AUTH0_CLIENT_SECRET>

  # Sentry DSN for Error Tracking
  # Get from: https://sentry.io/settings/projects/your-project/keys/
  SENTRY_DSN: <BASE64_ENCODED_SENTRY_DSN>

  # Redis Password (if using Redis for APQ/caching)
  REDIS_PASSWORD: <BASE64_ENCODED_REDIS_PASSWORD>

  # OpenTelemetry/Jaeger Configuration
  OTEL_EXPORTER_OTLP_HEADERS: <BASE64_ENCODED_OTEL_HEADERS>

---
# Example of creating secrets from literals (for reference):
# kubectl create secret generic fraiseql-secrets \
#   --from-literal=DB_USER=fraiseql \
#   --from-literal=DB_PASSWORD=your-db-password \
#   --from-literal=JWT_SECRET=$(openssl rand -base64 32) \
#   --from-literal=CSRF_SECRET=$(openssl rand -base64 32) \
#   --from-literal=SENTRY_DSN=https://...@sentry.io/... \
#   --dry-run=client -o yaml > secrets.yaml
