version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: fraiseql_dev
      POSTGRES_USER: fraiseql
      POSTGRES_PASSWORD: localdev123  # Change in production!
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d  # Optional: init scripts
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fraiseql"]
      interval: 10s
      timeout: 5s
      retries: 5

  fraiseql:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://fraiseql:localdev123@postgres:5432/fraiseql_dev
      FRAISEQL_PRODUCTION: "false"
      FRAISEQL_AUTO_CAMEL_CASE: "true"
      FRAISEQL_DEV_USERNAME: admin
      FRAISEQL_DEV_PASSWORD: admin123
      # Monitoring
      FRAISEQL_ENABLE_METRICS: "true"
      FRAISEQL_ENABLE_TRACING: "true"
      # Development settings
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
    ports:
      - "8000:8000"
    volumes:
      # Mount source code for development
      - ./src:/app/src:ro
      - ./examples:/app/examples:ro
    command: uvicorn examples.basic_app:app --host 0.0.0.0 --port 8000 --reload

  # Optional: Monitoring stack for development
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"

  # Optional: Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
