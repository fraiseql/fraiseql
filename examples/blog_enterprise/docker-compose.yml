version: '3.8'

services:
  # PostgreSQL database with enterprise extensions
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: fraiseql_blog_enterprise
      POSTGRES_USER: fraiseql
      POSTGRES_PASSWORD: fraiseql
    ports:
      - "5432:5432"
    volumes:
      - enterprise_db_data:/var/lib/postgresql/data
      - ./infrastructure/database/migrations:/docker-entrypoint-initdb.d
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fraiseql -d fraiseql_blog_enterprise"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for enterprise caching and sessions
  cache:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - enterprise_redis_data:/data
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Enterprise blog application
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - ENV=development
      - DB_HOST=db
      - DB_NAME=fraiseql_blog_enterprise
      - DB_USER=fraiseql
      - DB_PASSWORD=fraiseql
      - DB_PORT=5432
      - REDIS_URL=redis://cache:6379
      - JWT_SECRET=your-secret-key-change-in-production
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    volumes:
      - .:/app
    command: python app.py
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection (enterprise monitoring)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

  # Nginx reverse proxy (production-like setup)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    command: [nginx-debug, '-g', 'daemon off;']

volumes:
  enterprise_db_data:
  enterprise_redis_data:
  prometheus_data:
  grafana_data:
