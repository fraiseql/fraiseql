[tox]
envlist =
    py313
    lint
    type
    docs
minversion = 4.0
isolated_build = true

[testenv]
description = Run unit tests with pytest
deps =
    pytest>=8.3.5
    pytest-asyncio>=0.21.0
    pytest-xdist>=3.5.0
    pytest-mock>=3.11.0
    testcontainers[postgres]>=4.0.0
    psycopg[pool]>=3.2.6
    pytest-cov>=4.0.0
    pyyaml>=6.0.0
    redis>=5.0.0
    email-validator>=2.0.0
passenv =
    DATABASE_URL
    POSTGRES_*
    CI
    DOCKER_*
    TESTCONTAINERS_*
commands =
    pytest {posargs:tests} -m "not database"

[testenv:py313]
description = Run tests with Python 3.13 (primary development version)
basepython = python3.13

[testenv:lint]
description = Run linting checks with ruff
skip_install = true
deps =
    ruff>=0.8.4
commands =
    ruff check src/fraiseql
    ruff format --check src/fraiseql

[testenv:lint-fix]
description = Auto-fix linting issues
skip_install = true
deps =
    ruff>=0.8.4
commands =
    ruff check src/fraiseql --fix
    ruff format src/fraiseql

[testenv:type]
description = Run type checking with permissive pyright
deps =
    pyright>=1.1.401
    {[testenv]deps}
commands =
    pyright

[testenv:coverage]
description = Run tests with coverage
deps =
    {[testenv]deps}
    pytest-cov>=4.0.0
    coverage[toml]>=7.0
    pyyaml>=6.0.0
passenv =
    {[testenv]passenv}
    TEST_DATABASE_URL
commands =
    pytest --cov=src/fraiseql --cov-report=term-missing --cov-report=html --cov-report=xml {posargs:tests}

[testenv:docs]
description = Build documentation (when implemented)
changedir = docs
deps =
    mkdocs>=1.5.0
    mkdocs-material>=9.0.0
    mkdocs-mermaid2-plugin>=1.0.0
commands =
    mkdocs build --strict

[testenv:dev]
description = Development environment with all dependencies
deps =
    {[testenv]deps}
    {[testenv:lint]deps}
    {[testenv:type]deps}
    pre-commit>=4.2.0
commands =
    python -c "print('Development environment ready')"

[testenv:build]
description = Build distribution packages
skip_install = true
deps =
    build>=1.0.0
    twine>=4.0.0
commands =
    python -m build
    twine check dist/*

[testenv:testpypi]
description = Upload to TestPyPI
skip_install = true
deps =
    {[testenv:build]deps}
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_TEST_TOKEN
commands =
    {[testenv:build]commands}
    twine upload --repository testpypi dist/* --skip-existing

[testenv:integration]
description = Run integration tests (requires PostgreSQL)
deps =
    {[testenv]deps}
passenv =
    {[testenv]passenv}
    TEST_DATABASE_URL
commands =
    pytest {posargs:tests} -m integration

[testenv:database]
description = Run database tests (requires PostgreSQL or containers)
deps =
    {[testenv]deps}
passenv =
    {[testenv]passenv}
commands =
    pytest {posargs:tests} -m database

[gh-actions]
python =
    3.11: py311
    3.12: py312
    3.13: py313, lint, type
